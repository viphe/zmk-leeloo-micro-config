/*
 * Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

// Layers
#define CDH_M    0       // Main
#define CDH_L    1       // Lower
#define CDH_R    2       // Raise
#define CDH_A    3       // Adjust

#define CDH_N    4       // Number Pad
#define CDH_B    5       // BLE


// Short versions
#define BT0         BT_SEL 0
#define BT1         BT_SEL 1
#define BT2         BT_SEL 2
#define BT3         BT_SEL 3
#define BT4         BT_SEL 4

#define BOOTLDR     &bootloader

#define VOLUP   C_VOL_UP
#define VOLDN   C_VOL_DN
#define VOLMT   C_MUTE

#define BRIUP   C_BRI_UP
#define BRIDN   C_BRI_DN

#define RGBON   &rgb_ug RGB_ON
#define RGBOFF  &rgb_ug RGB_OFF
#define RGBTOG  &rgb_ug RGB_TOG
#define RGBHUI  &rgb_ug RGB_HUI
#define RGBHUD  &rgb_ug RGB_HUD
#define RGBSAI  &rgb_ug RGB_SAI
#define RGBSAD  &rgb_ug RGB_SAD
#define RGBBRI  &rgb_ug RGB_BRI
#define RGBBRD  &rgb_ug RGB_BRD
#define RGBEFF  &rgb_ug RGB_EFF


/*
 * Assign the cs-gpios pin to 4.
 * Uncomment these next few lines if implementing nice!view Displays
 */
//nice_view_spi: &spi0 {
//    cs-gpios = <&pro_micro 4 GPIO_ACTIVE_HIGH>;
//};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_win_layer {
            if-layers = <CDH_L CDH_R>;
            then-layer = <CDH_A>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <CDH_M>;
            bindings = <&kp ESC>;
        };
        combo_mac_cut {
            timeout-ms = <50>;
            key-positions = <21 22>;
            layers = <CDH_M>;
            bindings = <&kp RG(X)>;
        };
        combo_mac_copy {
            timeout-ms = <50>;
            key-positions = <22 23>;
            layers = <CDH_M>;
            bindings = <&kp RG(C)>;
        };
        combo_mac_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            layers = <CDH_M>;
            bindings = <&kp RG(V)>;
        };
    };

    behaviors {
        qmexc: qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bsp2del: bspc_l2_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_L2_DELETE";
            #binding-cells = <0>;
            bindings = <&lt 2 BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_COLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fslbsl: fslh_bslh {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BACKSLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        spc1und: spc1_under {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_L1_UNDERSCORE";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_CDH_layer {
            label = " COLEMAK";
            bindings = <
&kp Q       &kp W      &kp F      &kp P      &kp B                            &kp J      &kp L      &kp U      &kp Y      &fslbsl
&kp A       &kp R      &kp S      &kp T      &kp G                            &kp M      &kp N      &kp E      &kp I      &kp O
&mt LCTRL Z &kp X      &kp C      &kp D      &kp V     &mo CDH_N   &kp RGUI   &kp K      &kp H      &comsem    &dotcol    &qmexc
                       &kp LALT   &kp LGUI   &kp LSFT  &bsp2del    &lt 2 RET  &spc1und   &kp RALT   &lt 5 SQT
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp RIGHT LEFT>;
        };

        lower_CDH_layer {
            label = " Lower";
            bindings = <
&kp GRAVE  &kp N7     &kp N8     &kp N9     &kp AMPS                         &kp LPAR   &kp RPAR   &kp HASH   &kp PRCNT  &kp FSLH
&kp AT     &kp N4     &kp N5     &kp N6     &kp DLLR                         &kp PLUS   &kp MINUS  &kp STAR   &kp CARET  &kp EQUAL
&kp LCTRL  &kp N1     &kp N2     &kp N3     &kp N0     &trans     &trans     &kp LBKT   &kp RBKT   &kp LT     &kp GT     &kp PIPE
                      &trans     &trans     &trans     &kp BSPC   &trans     &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp LA(TAB) LS(LA(TAB))>;
        };

        raise_CDH_layer {
            label = " Raise";
            bindings = <
&kp TAB    &trans     &trans     &trans       &kp K_CMENU                         &kp PG_UP  &kp HOME   &kp UP     &kp END    &kp PSCRN
&kp CAPS   &trans     &trans     &kp LA(LEFT) &kp LA(RIGHT)                       &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &kp INS
&kp LC(Z)  &trans     &trans     &trans       &trans        &trans     &trans     &trans     &trans     &trans     &trans     &mt RSFT TILDE
                      &trans     &trans       &trans        &trans     &trans     &trans     &kp DEL    &trans
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp DOWN UP>;
        };

        adjust_CDH_layer {
            label = " Adjust";
            bindings = <

&kp F1     &kp F2     &kp F3     &kp F4     &kp F5                           &kp F6     &kp F7     &kp F8     &kp F9     &kp F10
&kp BRIDN  &kp BRIUP  &trans     &trans     &trans                           &trans     &trans     &trans     &kp F11    &kp F12
&kp VOLMT  &kp VOLDN  &kp VOLUP  &kp K_PP   &kp K_NEXT &trans     &trans     &trans     &trans     &trans     &trans     &trans
                      &trans     &trans     &trans     &trans     &trans     &trans     &trans     &kp K_EJECT
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numpad_layer {
            label = " NPad";
            bindings = <

&none      &none      &none      &none      &none                            &kp SLASH  &kp N7     &kp N8     &kp N9     &kp MINUS
RGBON      RGBTOG     RGBHUI     RGBSAI     RGBBRI                           &kp ASTRK  &kp N4     &kp N5     &kp N6     &kp PLUS 
RGBOFF     RGBEFF     RGBHUD     RGBSAD     RGBBRD     &trans     &trans     &none      &kp N1     &kp N2     &kp N3     &kp EQUAL
                      &trans     &trans     &trans     &trans     &trans     &kp N0     &kp DOT    &none
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        ble_layer {
            label = " BLE";
            bindings = <

&bt BT0    &bt BT1    &bt BT2    &bt BT3    &bt BT4                          &bt BT0    &bt BT1    &bt BT2    &bt BT3    &bt BT4
BOOTLDR    &sys_reset &none      &none      &none                            &none      &none      &none      &sys_reset BOOTLDR
&trans     &none      &none      &none      &none      &trans     &trans     &none      &none      &none      &none      &trans
                      &trans     &bt BT_CLR &trans     &trans     &trans     &trans     &none      &trans
            >;

            sensor-bindings = <&inc_dec_kp &none &none &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

    };
};
